{"version":3,"sources":["../../src/Controllers/calc.controllers.ts"],"names":["SchemaValidate","require","validate","SchemaCalc","CalcSchema","calc","req","res","result","body","console","log","operator","values","status","json","message","module","exports"],"mappings":";;AAAA,IAAMA,cAAc,GAAGC,OAAO,CAAC,uBAAD,CAAP,CAAiCC,QAAxD;;AACA,IAAMC,UAAU,GAAGF,OAAO,CAAC,uBAAD,CAAP,CAAiCG,UAApD;;AAIA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,GAAD,EAAMC,GAAN,EAAoB;AAC7B,MAAIC,MAAJ;AACA,MAAIC,IAAJ;;AAEA,MAAGT,cAAc,CAACM,GAAG,CAACG,IAAL,CAAjB,EAA4B;AACxBA,IAAAA,IAAI,GAAGH,GAAG,CAACG,IAAX;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAEA,YAAQA,IAAI,CAACG,QAAb;AACI,WAAK,GAAL;AACIJ,QAAAA,MAAM,GAAGC,IAAI,CAACI,MAAL,CAAY,CAAZ,IAAiBJ,IAAI,CAACI,MAAL,CAAY,CAAZ,CAA1B;AACAN,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACP,UAAAA,MAAM,EAAGA;AAAV,SAArB;AACA;;AACJ,WAAK,GAAL;AACIA,QAAAA,MAAM,GAAGC,IAAI,CAACI,MAAL,CAAY,CAAZ,IAAiBJ,IAAI,CAACI,MAAL,CAAY,CAAZ,CAA1B;AACAN,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACP,UAAAA,MAAM,EAAGA;AAAV,SAArB;AACA;;AACJ,WAAK,GAAL;AACIA,QAAAA,MAAM,GAAGC,IAAI,CAACI,MAAL,CAAY,CAAZ,IAAiBJ,IAAI,CAACI,MAAL,CAAY,CAAZ,CAA1B;AACAN,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACP,UAAAA,MAAM,EAAGA;AAAV,SAArB;AACA;;AACJ,WAAK,GAAL;AACIA,QAAAA,MAAM,GAAGC,IAAI,CAACI,MAAL,CAAY,CAAZ,IAAiBJ,IAAI,CAACI,MAAL,CAAY,CAAZ,CAA1B;AACAN,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACP,UAAAA,MAAM,EAAGA;AAAV,SAArB;AACA;;AACJ,WAAK,GAAL;AACIA,QAAAA,MAAM,GAAGC,IAAI,CAACI,MAAL,CAAY,CAAZ,IAAiBJ,IAAI,CAACI,MAAL,CAAY,CAAZ,CAA1B;AACAN,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACP,UAAAA,MAAM,EAAGA;AAAV,SAArB;AACA;;AACJ;AACID,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,UAAAA,OAAO,EAAG;AAAX,SAArB;AAtBR;AAwBH,GA5BD,MA6BK;AACDT,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAACC,MAAAA,OAAO,EAAG;AAAX,KAArB;AACH;AAEJ,CArCD;;AAuCAC,MAAM,CAACC,OAAP,GAAiB;AAACb,EAAAA,IAAI,EAAJA;AAAD,CAAjB","sourcesContent":["const SchemaValidate = require('../Schema/calc.schema').validate \r\nconst SchemaCalc = require('../Schema/calc.schema').CalcSchema\r\n\r\nimport { IBody } from \"./calc.controller.types\"\r\n\r\nconst calc = (req, res): void => {\r\n    let result: number\r\n    let body: IBody\r\n    \r\n    if(SchemaValidate(req.body)){\r\n        body = req.body\r\n        console.log(body)\r\n        \r\n        switch (body.operator) {\r\n            case \"+\":\r\n                result = body.values[0] + body.values[1]\r\n                res.status(200).json({result : result})\r\n                break\r\n            case \"-\":\r\n                result = body.values[0] - body.values[1]\r\n                res.status(200).json({result : result})\r\n                break\r\n            case \"*\":\r\n                result = body.values[0] * body.values[1]\r\n                res.status(200).json({result : result})\r\n                break\r\n            case \"/\":\r\n                result = body.values[0] / body.values[1]\r\n                res.status(200).json({result : result})\r\n                break\r\n            case \"%\":\r\n                result = body.values[0] % body.values[1]\r\n                res.status(200).json({result : result})\r\n                break\r\n            default:\r\n                res.status(400).json({message : \"invalid operator\"})\r\n        }\r\n    } \r\n    else {\r\n        res.status(400).json({message : \"invalid schema\"})\r\n    }\r\n    \r\n}\r\n\r\nmodule.exports = {calc}"],"file":"calc.controllers.js"}